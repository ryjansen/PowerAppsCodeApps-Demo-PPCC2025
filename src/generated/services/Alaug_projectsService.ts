/*!
 * Copyright (C) Microsoft Corporation. All rights reserved.
 * This file is autogenerated. Do not edit this file directly.
 */

import type { Alaug_projects } from '../models/Alaug_projectsModel';
import type { GetEntityMetadataOptions, EntityMetadata } from '@microsoft/power-apps/data/metadata/dataverse';
import type { IGetOptions, IGetAllOptions } from '../models/CommonModels';
import type { IOperationResult } from '@microsoft/power-apps/data';
import { dataSourcesInfo } from '../../../.power/schemas/appschemas/dataSourcesInfo';
import { getClient } from '@microsoft/power-apps/data';

export class Alaug_projectsService {
  private static readonly dataSourceName = 'alaug_projects';

  private static readonly client = getClient(dataSourcesInfo);

  public static async create(record: Omit<Alaug_projects, 'alaug_projectid'>): Promise<IOperationResult<Alaug_projects>> {
    const result = await Alaug_projectsService.client.createRecordAsync<Omit<Alaug_projects, 'alaug_projectid'>, Alaug_projects>(
      Alaug_projectsService.dataSourceName,
      record
    );
    return result;
  }

  public static async update(id: string, changedFields: Partial<Omit<Alaug_projects, 'alaug_projectid'>>): Promise<IOperationResult<Alaug_projects>> {
    const result = await Alaug_projectsService.client.updateRecordAsync<Partial<Omit<Alaug_projects, 'alaug_projectid'>>, Alaug_projects>(
      Alaug_projectsService.dataSourceName,
      id.toString(),
      changedFields
    );
    return result;
  }

  public static async delete(id: string): Promise<void> {
    await Alaug_projectsService.client.deleteRecordAsync(
      Alaug_projectsService.dataSourceName,
      id.toString());
  }

  public static async get(id: string, options?: IGetOptions): Promise<IOperationResult<Alaug_projects>> {
    const result = await Alaug_projectsService.client.retrieveRecordAsync<Alaug_projects>(
      Alaug_projectsService.dataSourceName,
      id.toString(),
      options
    );
    return result;
  }

  public static async getAll(options?: IGetAllOptions): Promise<IOperationResult<Alaug_projects[]>> {
    const result = await Alaug_projectsService.client.retrieveMultipleRecordsAsync<Alaug_projects>(
      Alaug_projectsService.dataSourceName,
      options
    );
    return result;
  }

  public static getMetadata(
    options: GetEntityMetadataOptions<Alaug_projects> = {}
  ): Promise<IOperationResult<Partial<EntityMetadata>>> {
    return Alaug_projectsService.client.executeAsync({
      dataverseRequest: {
        action: "getEntityMetadata",
        parameters: {
          tableName: Alaug_projectsService.dataSourceName,
          options: options as GetEntityMetadataOptions,
        },
      },
    });
  }
}
